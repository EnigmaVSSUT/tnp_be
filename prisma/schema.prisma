generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGO_URI")
}

model Admin {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  announcements Announcement[]
}

///////////////////////////
// BRANCH ENUM
///////////////////////////
enum Branches {
  CSE
  IT
  CSE_AIML
  PE
  ETC
  ME
  CE
  EE
}

///////////////////////////
// STUDENT
///////////////////////////
model Student {
  id               String         @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  regNo            String         @unique
  email            String         @unique
  password         String
  phone            String?
  profileImg       String?
  branch           Branches?
  graduationYear   Int?
  cgpa             Float?
  activeBacklog    Int?
  profileCompleted Boolean        @default(false)
  isVerified       Boolean        @default(false)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  documents        Document[]
  experiences      Experience[]
  applications     Application[]
  notifications    Notification[]

  @@index([branch, graduationYear])
}

///////////////////////////
// DOCUMENTS
///////////////////////////
enum DocType {
  TENTH_CERTIFICATE
  TWELFTH_CERTIFICATE
  RECENT_MARKSHEET
  IDENTITY_CARD
  CERTIFICATION
  OTHER
}

model Document {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  student    Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId  String   @db.ObjectId
  type       DocType
  url        String
  fileName   String
  fileSize   Int
  mimeType   String
  isVerified Boolean  @default(false)
  uploadedAt DateTime @default(now())
}

model Documents {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  student   Student    @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId String     @db.ObjectId @unique
  documents Document[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

enum ExpType {
  CERTIFICATION
  INTERNSHIP
  PROJECT
  APPRENTICESHIP
}

model Experience {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  student      Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId    String   @db.ObjectId
  type         ExpType
  title        String
  organisation String
  description  String?
  startDate    DateTime
  endDate      DateTime?
  technologies String[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

///////////////////////////
// JOBS
///////////////////////////
enum JobType {
  FULL_TIME
  INTERNSHIP
}

enum jobListingStatus {
  OPEN
  CLOSED
  IN_PROGRESS
}

model JobEligibility {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  branches        Branches[]
  graduationYears Int[]
  minCgpa         Float?
  jobListing      JobListing?
}

model JobListing {
  id            String           @id @default(auto()) @map("_id") @db.ObjectId
  company       Company          @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId     String           @db.ObjectId
  companyName   String
  jobTitle      String
  jobType       JobType
  description   String
  eligibility   JobEligibility?  @relation(fields: [eligibilityId], references: [id])
  eligibilityId String?          @unique @db.ObjectId
  testLink      String?
  status        jobListingStatus
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  applications  Application[]
  analytics     Analytic[]
}

///////////////////////////
// APPLICATION
///////////////////////////
enum ApplicationStatus {
  APPLIED
  SHORTLISTED
  TEST
  INTERVIEW
  ACCEPTED
  REJECTED
}

model Application {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  student    Student     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId  String      @db.ObjectId
  jobListing JobListing  @relation(fields: [jobId], references: [id], onDelete: Cascade)
  jobId      String      @db.ObjectId
  status     ApplicationStatus
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

///////////////////////////
// NOTIFICATION
///////////////////////////
model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  student   Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId String   @db.ObjectId
  title     String
  message   String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

///////////////////////////
// COMPANY + ANALYTIC
///////////////////////////
model Company {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  description   String
  industry      String
  website       String
  contactPerson String
  contactEmail  String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  jobListings   JobListing[]
  analytics     Analytic[]
}

model Analytic {
  id              String     @id @default(auto()) @map("_id") @db.ObjectId
  jobListing      JobListing @relation(fields: [jobId], references: [id], onDelete: Cascade)
  jobId           String     @db.ObjectId
  company         Company    @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId       String     @db.ObjectId
  totalApplicants Int
  shortlisted     Int
  selected        Int
  rejected        Int
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @default(now())
}

///////////////////////////
// ANNOUNCEMENT
///////////////////////////
enum AudienceType {
  ALL
  BRANCH
  BATCH
}

type AnnouncementFilter {
  branches        Branches[]
  graduationYears Int[]
}

model Announcement {
  id          String              @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  audience    AudienceType
  filterData  AnnouncementFilter? 
  createdBy   String              @db.ObjectId
  admin       Admin               @relation(fields: [createdBy], references: [id])
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGO_URI")
}

model Admin {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  announcements Announcement[]
}

enum Branches {
  CSE
  IT
  CSE_AIML
  PE
  ETC
  ME
  CE
  EE
}

model Student {
  id               String         @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  regNo            String         @unique
  email            String         @unique
  password         String
  profileImg       String?
  branch           Branches?
  graduationYear   Int?
  cgpa             Float?
  activeBacklog    Int?
  profileCompleted Boolean        @default(false)
  isVerified       Boolean        @default(false)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  documents        Documents[]
  experiences      Experience[]
  applications     Application[]
  notifications    Notification[]

  @@index([branch, graduationYear])
}

enum DocType {
  tenthCertificate
  twelthCertificate
  recentMarksheet
  identityCard
  certification
  other
}

type Document {
  type       DocType
  url        String
  fileName   String
  fileSize   Int
  mimeType   String
  isVerified Boolean  @default(false)
  uploadedAt DateTime @default(now())
}

model Documents {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  student   Student    @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId String     @db.ObjectId @unique
  documents Document[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

enum ExpType {
  certification
  internship
  project
  apprenticeship
}

model Experience {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  studentId    String   @db.ObjectId
  student      Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  type         ExpType
  title        String
  organisation String
  description  String?
  startDate    DateTime
  endDate      DateTime?
  technologies String[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

enum JobType {
  FULL_TIME
  INTERNSHIP
}

type JobEligibility {
  branches        Branches[]
  graduationYears Int[]
  minCgpa         Float?
}

enum jobListingStatus {
  OPEN
  CLOSED
  IN_PROGRESS
}

model JobListing {
  id           String           @id @default(auto()) @map("_id") @db.ObjectId
  companyId    String           @db.ObjectId
  company      Company          @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyName  String
  jobTitle     String
  jobType      JobType
  description  String
  eligibility  JobEligibility
  testLink     String?
  status       jobListingStatus
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  applications Application[]
  analytics    Analytic[]
}

enum ApplicationStatus {
  APPLIED
  SHORTLISTED
  TEST
  INTERVIEW
  ACCEPTED
  REJECTED
}

model Application {
  id         String            @id @default(auto()) @map("_id") @db.ObjectId
  student    Student           @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId  String            @db.ObjectId
  jobListing JobListing        @relation(fields: [jobId], references: [id], onDelete: Cascade)
  jobId      String            @db.ObjectId
  status     ApplicationStatus
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  student   Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId String   @db.ObjectId
  title     String
  message   String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Company {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  description   String
  industry      String
  website       String
  contactPerson String
  contactEmail  String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  JobListing    JobListing[]
}

model Analytic {
  id              String     @id @default(auto()) @map("_id") @db.ObjectId
  jobListing      JobListing @relation(fields: [jobId], references: [id])
  jobId           String     @db.ObjectId
  totalApplicants Int
  shortlisted     Int
  selected        Int
  rejected        Int
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
}

enum AudienceType {
  ALL
  BRANCH
  BATCH
}

type AnnouncementFilter {
  branches        Branches[]
  graduationYears Int[]
}

model Announcement {
  id          String              @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  audience    AudienceType
  filterData  AnnouncementFilter? 
  createdBy   String              @db.ObjectId
  admin       Admin               @relation(fields: [createdBy], references: [id])
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
}
